
Either
- 1 sqlite database per document
    - this makes eventual scaling (plus bonus edge serving) easily
    - this makes implementing acid transactions w/ multiple documents hard (bad)
        - but within same easier as we can do stuff like lock the whole db which sqlite does
- 1 database for all data
    - can then shard later?
    - point where this becomes slow is probably far in the future tbh

    - there are multiple auto-horizontal-scaling dbs that claim to still have acid transactions. for example cockroachdb, spanner for sql-compatibility, or mongodb
        - for our desired app a little latency is potentially ok as users will have an offline copy...?
    
    it can't be that simple?

-----
ok 1 db for all data so it can do acidity for us

our server is just wrapping GET and INSERT of the db
we also need realtime push-based notifs though!

How to implement realtime:
    1. go through the db
    2. go through a specialized centralized db or broker thats more faster
    3. have server send down the realtime before writing
        what if it fails/changes in the db?
            then I guess we treat realtime state as likely-true not canonical and refetch straight from the db periodically?
        can we guarantee ACID ourselves?, what if we start with a single node (not distributed) 
        i need to learn the node concurrency model
