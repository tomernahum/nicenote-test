


TODO Next:
- Crypto
- batching

TODO:
- clean up the console logs
- ask AI for tips on code quality, api design


TODO Later:
- fix up snapshotting to be more intelligent, don't make duplicate snapshots, don't make them too frequently, maybe notify clients of new snapshots to help with them deciding whether to snapshot (may fix the above on its own)

- publish this in it's own repo
- publish this on npm

- abstract the buckets for dynamic amount of buckets (should be easy right?)




-----Oldish---------


- intelligent snapshot rejection on server?

- notify clients of new snapshots?
    - waste of bandwidth if snapshots are really correct
- periodic reloads of doc just in case it diverges
    - related to above
    - balance of bandwidth usage vs safety
- only send snapshot if document is too long including snapshots?
    - need to notify client of existence of new snapshots for this (not necessarily send the whole content down...)


- proper cryptography key stuff.
    - support multiple keys & while-running key rotation
    - write keys
maybe: writer id or writer key id recorded in operation. later may add custom resolving crdt-like which takes this into account
    for now plan was to have one shared write-key. we could give each writer their own key per document = almost same as identity 

- error handling down to user (eg max server message size)
- clean up console logs

- deploy for easier cross-device testing


- batching of updates to mask frequency of them from server






- server: think about spam prevention story maybe? & integration with a proper authed / customized extendible server (besides cryptography auth)
    - maybe turn backend into library or something idk

- is there a way to replace server with webrtc + storage endpoint for more decentralization/openness, but more importantly to save on egress charges?
    is ingress of storage of new updates free? , and only loading the doc (maybe even only while noone else is online) has to be egress

- make sure it is as bug free as possible

- restructure folders and stuff

- publish this

Maybe:
- delete/wipe doc functionality? (you can just squash empty doc in prod and delete from sql viewer in dev though)
- maybe deprecate connect to doc flow in 2-server-interface, since we want to fetch it before connecting to socket part
- or not. it's possible I got confused thinking that http is faster than spinning up websocket.

later: make buckets dynamic
& add other crdt libraries / custom (loro tree & reducer-based)

--


Make sure everything is good

--
- could abstract bucket from "doc"|"awareness" to be any string, to more easily connect to other crdts or even ordered reducers